-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package unison-util-nametree
@version 0.0.0

module Unison.Util.Defns

-- | Definitions (terms and types) in a namespace.
data Defns terms types
Defns :: terms -> types -> Defns terms types
[$sel:terms:Defns] :: Defns terms types -> terms
[$sel:types:Defns] :: Defns terms types -> types

-- | A common shape of definitions - terms and types are stored in the same
--   structure.
type DefnsF f terms types = Defns (f terms) (f types)
type DefnsF2 f g terms types = Defns (f (g terms)) (f (g types))
type DefnsF3 f g h terms types = Defns (f (g (h terms))) (f (g (h types)))
type DefnsF4 f g h i terms types = Defns (f (g (h (i terms)))) (f (g (h (i types))))
alignDefnsWith :: Semialign f => (These a b -> c) -> Defns (f a) (f b) -> f c
defnsAreEmpty :: (Foldable f, Foldable g) => Defns (f a) (g b) -> Bool
hoistDefnsF :: (forall x. f x -> g x) -> DefnsF f a b -> DefnsF g a b
mapDefns :: (a -> b) -> Defns a a -> Defns b b
unzipDefns :: Defns (tm1, tm2) (ty1, ty2) -> (Defns tm1 ty1, Defns tm2 ty2)
unzipDefnsWith :: (tm1 -> (tm2, tm3)) -> (ty1 -> (ty2, ty3)) -> Defns tm1 ty1 -> (Defns tm2 ty2, Defns tm3 ty3)
zipDefns :: Defns tm1 ty1 -> Defns tm2 ty2 -> Defns (tm1, tm2) (ty1, ty2)
zipDefnsWith :: (tm1 -> tm2 -> tm3) -> (ty1 -> ty2 -> ty3) -> Defns tm1 ty1 -> Defns tm2 ty2 -> Defns tm3 ty3
zipDefnsWith3 :: (tm1 -> tm2 -> tm3 -> tm4) -> (ty1 -> ty2 -> ty3 -> ty4) -> Defns tm1 ty1 -> Defns tm2 ty2 -> Defns tm3 ty3 -> Defns tm4 ty4
instance (GHC.Base.Semigroup terms, GHC.Base.Semigroup types) => GHC.Base.Semigroup (Unison.Util.Defns.Defns terms types)
instance (GHC.Base.Monoid terms, GHC.Base.Monoid types) => GHC.Base.Monoid (Unison.Util.Defns.Defns terms types)
instance (GHC.Show.Show terms, GHC.Show.Show types) => GHC.Show.Show (Unison.Util.Defns.Defns terms types)
instance GHC.Generics.Generic (Unison.Util.Defns.Defns terms types)
instance Data.Bifoldable.Bifoldable Unison.Util.Defns.Defns
instance Data.Bifunctor.Bifunctor Unison.Util.Defns.Defns
instance Data.Bitraversable.Bitraversable Unison.Util.Defns.Defns

module Unison.Util.Nametree

-- | A nametree has a value, and a collection of children nametrees keyed
--   by name segment.
data Nametree a
Nametree :: !a -> !Map NameSegment (Nametree a) -> Nametree a
[$sel:value:Nametree] :: Nametree a -> !a
[$sel:children:Nametree] :: Nametree a -> !Map NameSegment (Nametree a)

-- | Traverse over a nametree, with access to the list of name segments (in
--   reverse order) leading to each value.
traverseNametreeWithName :: Applicative f => ([NameSegment] -> a -> f b) -> Nametree a -> f (Nametree b)

-- | Build a nametree from a seed value.
unfoldNametree :: (a -> (b, Map NameSegment a)) -> a -> Nametree b

-- | <a>flattenNametree</a> organizes a nametree like
--   
--   <pre>
--   "foo" = #foo
--   "foo": {
--     "bar" = #bar
--     "bar": {
--       "baz" = #baz
--     }
--   }
--   </pre>
--   
--   into an equivalent-but-flat association between names and definitions,
--   like
--   
--   <pre>
--   {
--     "foo" = #bar,
--     "foo.bar" = #bar,
--     "foo.bar.baz" = #baz
--   }
--   </pre>
flattenNametree :: forall a b. Ord b => (a -> Map NameSegment b) -> Nametree a -> BiMultimap b Name

-- | <a>unflattenNametree</a> organizes an association between names and
--   definitions like
--   
--   <pre>
--   {
--     "foo" = #bar,
--     "foo.bar" = #bar,
--     "foo.bar.baz" = #baz
--   }
--   </pre>
--   
--   into an equivalent-but-less-flat nametree, like
--   
--   <pre>
--   "foo" = #foo
--   "foo": {
--     "bar" = #bar
--     "bar": {
--       "baz" = #baz
--     }
--   }
--   </pre>
unflattenNametree :: Ord a => BiMultimap a Name -> Nametree (Map NameSegment a)
instance GHC.Show.Show a => GHC.Show.Show (Unison.Util.Nametree.Nametree a)
instance GHC.Generics.Generic (Unison.Util.Nametree.Nametree a)
instance Data.Traversable.Traversable Unison.Util.Nametree.Nametree
instance Data.Foldable.Foldable Unison.Util.Nametree.Nametree
instance GHC.Base.Functor Unison.Util.Nametree.Nametree
instance Data.Semialign.Internal.Semialign Unison.Util.Nametree.Nametree
instance Data.Semialign.Internal.Zip Unison.Util.Nametree.Nametree
instance Data.Semialign.Internal.Unzip Unison.Util.Nametree.Nametree
