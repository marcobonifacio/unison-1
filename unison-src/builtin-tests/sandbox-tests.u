
sandbox.check ok name a k =
  match Value.validateSandboxed ok (value a) with
    Left _ -> Tests.fail name "unknown dependencies"
    Right [] -> k true
    Right _  -> k false

sandbox.checkSafe name a =
  sandbox.check [] name a cases
    true  -> Tests.pass (name ++ " safe")
    false -> Tests.fail name "unexpectedly unsafe"

sandbox.checkUnsafe name a =
  sandbox.check [] name a cases
    true  -> Tests.fail name "unexpectedly safe"
    false -> Tests.pass (name ++ " unsafe")

sandbox.checkAllowed name ok a =
  sandbox.check ok name a cases
    true  -> Tests.pass (name ++ " allowed")
    false -> Tests.fail name "unexpected disallowed"

sandbox.directory =
  "unison-src/transcripts-using-base/serialized-cases/"

sandbox.file = FilePath (directory ++ "case-04.v4.ser")

sandbox.open1 = do
  _ = FilePath.open (FilePath "hello")
  ()

sandbox.open2 = do
  !open1

serial.checkLoaded : '{IO, Tests, Exception} ()
serial.checkLoaded = do
  input = FilePath.readFile sandbox.file
  match fromBase32 input with
    Left msg -> raiseFailure msg input
    Right bs ->
    (deps, v) = loadValueBytes bs

    _ = cache_ deps
    match Value.load v with
      Left l -> raiseFailure "value missing deps" l
      Right (f, _) -> checkUnsafe "loaded" f

sandbox.tests = do
  checkSafe "5" 5
  checkSafe "5.0" 5.0
  checkSafe "\"\"" ""
  checkSafe "0xs1337" 0xs1337
  checkSafe "List.map" List.map
  checkUnsafe "FilePath.open" FilePath.open
  checkUnsafe "sandbox.open1" sandbox.open1
  checkUnsafe "sandbox.open2" sandbox.open2
  checkUnsafe "Code.cache_" Code.cache_
  checkAllowed "FilePath.open" [termLink FilePath.open.impl] FilePath.open
  checkAllowed "Code.cache_" [termLink Code.cache_] Code.cache_
  !checkLoaded
