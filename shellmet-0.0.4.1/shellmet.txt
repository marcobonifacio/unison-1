-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Out of the shell solution for scripting in Haskell
--   
--   Shellmet provides easy and convenient way to call shell commands from
--   Haskell programs
@package shellmet
@version 0.0.4.1


-- | This module contains neat utilities to be able to work with shell
--   commands in generic and simple way using just string literals.
--   
--   <pre>
--   &gt;&gt;&gt; "echo" ["Hello", "World!"]
--   ⚙  echo Hello 'World!'
--   Hello World!
--   </pre>
module Shellmet

-- | Run shell command with given options and return stripped stdout of the
--   executed command.
--   
--   <pre>
--   &gt;&gt;&gt; "echo" $| ["Foo", "Bar"]
--   "Foo Bar"
--   </pre>
($|) :: FilePath -> [Text] -> IO Text
infix 5 $|

-- | This operator runs shell command with given options but doesn't print
--   the command itself.
--   
--   <pre>
--   &gt;&gt;&gt; "echo" $^ ["Foo", "Bar"]
--   Foo Bar
--   </pre>
($^) :: FilePath -> [Text] -> IO ()
infix 5 $^

-- | Do some IO actions when process failed with <a>IOError</a>.
--   
--   <pre>
--   &gt;&gt;&gt; "echo" ["0"] $? putStrLn "Command failed"
--   ⚙  echo 0
--   0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "exit" ["1"] $? putStrLn "Command failed"
--   ⚙  exit 1
--   Command failed
--   </pre>
($?) :: IO a -> IO a -> IO a
infixl 4 $?

-- | Returns the indicator of if the command succeded or not.
--   
--   <pre>
--   &gt;&gt;&gt; isSuccess $ "echo" ["Hello world!"]
--   ⚙  echo 'Hello world!'
--   Hello world!
--   True
--   </pre>
isSuccess :: IO a -> IO Bool
instance (a GHC.Types.~ [Data.Text.Internal.Text], b GHC.Types.~ GHC.Types.IO ()) => Data.String.IsString (a -> b)
